%{
#include <stdio.h>

#include "types.h"
#include "code.h"

#define DEBUG_MODE
#define YYDEBUG 10

extern FILE* yyin;
extern char* yytext;
extern int yylineno;
int yylex(void);

%}

%union {
	int intvalue;
	bool boolvalue;
	std::string* strvalue;
	Language::Type typevalue;
	Language::Value* exprptrvalue;
	Language::Variable* varptrvalue;
	
	std::vector<Language::Variable*>* decllist;
}


%token <strvalue>ID TELLING FIXED
%token INT_TYPE STR_TYPE BOOLEAN_TYPE
%token <intvalue>NUMBER <strvalue>STRING <boolvalue>BOOL_TRUE <boolvalue>BOOL_FALSE
%token QUOTE 
%token ENTER PROCLAIM LET THERE EQUALLING UPON ADDED ASCEND DESCEND CRY FOR DIVIDED REMINDING ADDING CONSPIRING EMPOWERING IS LEFT RIGHT UP TO DOWN LOWER GREATER THAN EXEUNT SUMMONED NOT SINCE FROM ASK WHETHER THEN OTHERWISE CHANGES INCREASES DECREASES WHENEVER DOES NONE ONE TWICE 

%type <strvalue>var_type
%type <varptrvalue>expression
%type <varptrvalue>predef_func
%type <varptrvalue>output
%type <varptrvalue>input
%type <decllist>decl_list
%type <varptrvalue>declaration
%type <varptrvalue>complex_identifier

%left  ADDING CONSPIRING
%left  EMPOWERING REMINDING DIVIDED


%start programm

%%
programm: 
	statements {printf("program corect sintactic\n");}
	;


statements: 
	statement { printf("Statement"); }
	| statements statement
	;


statement: 
	expression { printf("Expression"); }
	| declaration { printf("Declaration"); }
	| struct_decl
	| assign
	;

complex_identifier:
	ID 
	{
		$$ = get_var(STR($1), NULL);
	}
	| ID FROM complex_identifier 
	{
		$$ = get_var(STR($1), $3);
	}
	;


var_type: 
	INT_TYPE 
	{ 
		$$ = make_type("$INT"); 
	}
	| STR_TYPE 
	{ 
		$$ = make_type("$STR"); 
	}
	| BOOLEAN_TYPE 
	{ 
		$$ = make_type("$BOOL"); 
	}
	| ID 
	{ 
		$$ = make_type(STR($1)); 
	}
	;


assign:
	LET complex_identifier expression
	{
		make_assign($2, $3);
	}
	;

declaration:	
	ENTER var_type ID
	{
		$$ = make_variable(STR($2), STR($3), false, NULL);	
	}
	| ENTER FIXED var_type ID
	{
		$$ = make_variable(STR($2), STR($3), true, NULL);	
	}
	| ENTER var_type ID TELLING expression
	{
		$$ = make_variable(STR($2), STR($3), false, $5);	
	}
	| ENTER FIXED var_type ID TELLING expression
	{
		$$ = make_variable(STR($3), STR($4), true, $6);	
	}
	;



decl_list:
	declaration
	{
		$$ = make_list($1, NULL);
	}
	| decl_list ',' declaration
	{
		$$ = make_list($3, $1);
	}
	;



struct_decl:	
	PROCLAIM ID '<' decl_list '>'
	{
		make_struct(STR($2), $4);
	}
	;


expression:
	'<' expression '>' 
	{ 
		$$ = $2; 
	}
	| expression ADDING expression
	{
		printf("a");
		$$ = make_addition($1, $3);
	}
	| expression CONSPIRING expression 
	{
		printf("a");
		$$ = make_substraction($1, $3);
	}
	| expression DIVIDED expression
	{
		printf("a");
		$$ = make_division($1, $3);		
	}
	| expression REMINDING expression
	{
		printf("a");
		$$ = make_reminder($1, $3);	
	}
	| expression EMPOWERING expression 
	{
		printf("a");
		$$ = make_multiplication($1, $3);
	}
	| complex_identifier
	{
		printf("a");

		$$ = $1;
	}
	| NUMBER
	{ 
		printf("a");
		$$ = make_expression("$INT", &$1);
	}
	| STRING 
	{ 
		printf("a");
		$$ = make_expression("$STR", &$1);
	}
	| BOOL_FALSE 
	{ 
		printf("a");
		$$ = make_expression("$BOOL", &$1);
	}
	| BOOL_TRUE 
	{ 
		printf("a");
		$$ = make_expression("$BOOL", &$1);
	}
	| predef_func
	;

predef_func:
	output
	| input
	;


output:
	QUOTE '<' expression '>' 
	{ 
		$$ = make_print($3);
		}
	;

input:
	ID SUMMONED
	{
		$$ = make_input(STR($1));
	}
	;

%%


int main(int argc, char** argv){
	printf("hey0");
	add_scope("$main");
	yyin=fopen(argv[1],"r");
	yyparse();
	return 0;
} 
